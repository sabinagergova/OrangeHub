diff -r 2544886677c0 SeleniumSabina/FitNesseRoot/FrontPage/SeleniumSabinaSuit/LogIn/content.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/SeleniumSabina/FitNesseRoot/FrontPage/SeleniumSabinaSuit/LogIn/content.txt	Mon Jul 29 14:25:13 2013 +0300
@@ -0,0 +1,22 @@
+!contents 
+
+!define TEST_SYSTEM {slim}
+
+|import                           |
+|com.skrill.interns.SeleniumSabina|
+
+
+|script    |incomming outgoing constants|
+|$EMAIL=   |email builder;              |
+|$PASSWORD=|password builder;  |$EMAIL  |
+
+|script|fitnesse test scripts          |
+|ensure|register user;|$EMAIL|$PASSWORD|
+|reject|register user;|$EMAIL|alabala  |
+|reject|register user;|$EMAIL|         |
+|reject|register user;|      |$PASSWORD|
+|ensure|login;        |$EMAIL|$PASSWORD|
+|reject|login;        |$EMAIL|alabala  |
+|reject|login;        |$EMAIL|         |
+|reject|login;        |      |$PASSWORD|
+|closing browser;                      |
diff -r 2544886677c0 SeleniumSabina/FitNesseRoot/FrontPage/SeleniumSabinaSuit/SeleniumTask/content.txt
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/SeleniumSabina/FitNesseRoot/FrontPage/SeleniumSabinaSuit/SeleniumTask/content.txt	Mon Jul 29 14:25:13 2013 +0300
@@ -0,0 +1,22 @@
+!contents 
+
+!define TEST_SYSTEM {slim}
+
+|import                           |
+|com.skrill.interns.SeleniumSabina|
+
+|script    |incomming outgoing constants|
+|$EMAIL=   |email builder;              |
+|$PASSWORD=|password builder;  |$EMAIL  |
+
+!|fitnesse test                 |
+|email |password |register user?|
+|$EMAIL|$PASSWORD|true          |
+|$EMAIL|$PASSWORD|false         |
+
+!|log in                |
+|email |password |login?|
+|$EMAIL|$PASSWORD|true  |
+
+|script|fitnesse test|
+|closing browser;    |
diff -r 2544886677c0 SeleniumSabina/pom.xml
--- a/SeleniumSabina/pom.xml	Thu Jul 25 12:12:24 2013 +0300
+++ b/SeleniumSabina/pom.xml	Mon Jul 29 14:25:13 2013 +0300
@@ -1,42 +1,74 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
 
-    <groupId>com.skrill.interns</groupId>
-    <artifactId>SeleniumSabina</artifactId>
-    <version>0.0.1-SNAPSHOT</version>
-    <packaging>jar</packaging>
+	<groupId>com.skrill.interns</groupId>
+	<artifactId>SeleniumSabina</artifactId>
+	<version>0.0.1-SNAPSHOT</version>
+	<packaging>jar</packaging>
 
-    <name>SeleniumSabina</name>
-    <url>http://maven.apache.org</url>
+	<name>SeleniumSabina</name>
+	<url>http://maven.apache.org</url>
 
-    <properties>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+	<properties>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+	</properties>
 
-    <dependencies>
-        <dependency>
-            <groupId>junit</groupId>
-            <artifactId>junit</artifactId>
-            <version>3.8.1</version>
-            <scope>test</scope>
-        </dependency>
-        <dependency>
-            <groupId>org.seleniumhq.selenium</groupId>
-            <artifactId>selenium-java</artifactId>
-            <version>2.33.0</version>
-        </dependency>
-        <distributionManagement>
-            <repository>
-                <id>internal.releases</id>
-                <url>http://repo.dev.moneybookers.net/libs-releases-local</url>
-                <uniqueVersion>false</uniqueVersion>
-            </repository>
-            <snapshotRepository>
-                <id>internal.snapshots</id>
-                <url>http://repo.dev.moneybookers.net/libs-snapshots-local</url>
-                <uniqueVersion>false</uniqueVersion>
-            </snapshotRepository>
-        </distributionManagement>
-    </dependencies>
+	<dependencies>
+		<dependency>
+			<groupId>junit</groupId>
+			<artifactId>junit</artifactId>
+			<version>3.8.1</version>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.seleniumhq.selenium</groupId>
+			<artifactId>selenium-java</artifactId>
+			<version>2.33.0</version>
+		</dependency>
+	</dependencies>
+	<distributionManagement>
+		<repository>
+			<id>internal.releases</id>
+			<url>http://repo.dev.moneybookers.net/libs-releases-local</url>
+			<uniqueVersion>false</uniqueVersion>
+		</repository>
+		<snapshotRepository>
+			<id>internal.snapshots</id>
+			<url>http://repo.dev.moneybookers.net/libs-snapshots-local</url>
+			<uniqueVersion>false</uniqueVersion>
+		</snapshotRepository>
+	</distributionManagement>
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<version>2.3.2</version>
+				<configuration>
+					<encoding>utf8</encoding>
+					<source>1.6</source>
+					<target>1.6</target>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>com.valtech.source.maven</groupId>
+				<artifactId>maven-fitnesse-cpgen-plugin</artifactId>
+				<version>1.0</version>
+				<configuration>
+					<fitnesseRoot>${basedir}/FitNesseRoot</fitnesseRoot>
+				</configuration>
+				<executions>
+					<execution>
+						<phase>install</phase>
+						<goals>
+							<goal>gencp</goal>
+						</goals>
+					</execution>
+				</executions>
+			</plugin>
+		</plugins>
+	</build>
+
+
 </project>
diff -r 2544886677c0 SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/FitnesseTest.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/FitnesseTest.java	Mon Jul 29 14:25:13 2013 +0300
@@ -0,0 +1,24 @@
+package com.skrill.interns.SeleniumSabina;
+
+public class FitnesseTest {
+
+	public String email;
+	public String password;
+
+	public boolean registerUser() {
+		RegisterUser.register(email, password);
+		return RegisterUser.logout();
+	}
+
+	public void closingBrowser() {
+		RegisterUser.closingBrowser();
+	}
+
+	public void setEmail(String email) {
+		this.email = email;
+	}
+
+	public void setPassword(String password) {
+		this.password = password;
+	}
+}
diff -r 2544886677c0 SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/FitnesseTestScripts.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/FitnesseTestScripts.java	Mon Jul 29 14:25:13 2013 +0300
@@ -0,0 +1,19 @@
+package com.skrill.interns.SeleniumSabina;
+
+public class FitnesseTestScripts {
+
+	public boolean registerUser(String email, String password) {
+		RegisterUser.register(email, password);
+		return RegisterUser.logout();
+	}
+
+	public boolean login(String email, String password) {
+		RegisterUser.login(email, password);
+		return RegisterUser.logout();
+	}
+
+	public void closingBrowser() {
+		RegisterUser.closingBrowser();
+	}
+
+}
diff -r 2544886677c0 SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/IncommingOutgoingConstants.java
--- a/SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/IncommingOutgoingConstants.java	Thu Jul 25 12:12:24 2013 +0300
+++ b/SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/IncommingOutgoingConstants.java	Mon Jul 29 14:25:13 2013 +0300
@@ -7,50 +7,44 @@
 	public static final String LOGIN_URL = "https://my-integr.dev.moneybookers.net/login";
 	public static final String SIGNUP_URL = "https://my-integr.dev.moneybookers.net/signup";
 	public static final String REMOTE_URL = "http://automationvl1.dev.moneybookers.net:4444/wd/hub";
-	public static final String SIGNUP = ".user-actions a";
-	public static final String SELECT_COUNTRY = "#user_registration_address_country_id option";
-	public static final String COUNTRY = "Bulgaria";
-	public static final String SELECT_CURRENCY = "#user_registration_account_currency_id option";
-	public static final String CURRENCY = "GBP";
-	public static final String FIRST_NAME = "#user_registration_profile_first_name";
+	public static final String SELECT_COUNTRY_ID = "#user_registration_address_country_id option";
+	public static final String SELECT_CURRENCY_ID = "#user_registration_account_currency_id option";
+	public static final String FIRST_NAME_ID = "#user_registration_profile_first_name";
+	public static final String LAST_NAME_ID = "#user_registration_profile_last_name";
+	public static final String ADDRESS_1_ID = "#user_registration_address_address_line_1";
+	public static final String ADDRESS_2_ID = "#user_registration_address_address_line_2";
+	public static final String CITY_ID = "#user_registration_address_city";
+	public static final String POST_CODE_ID = "#user_registration_address_postal_code";
+	public static final String PHONE_NUMBER_ID = "#user_registration_address_phone_phone";
+	public static final String BUTTON_CONTINUE_CLASS = ".btn.btn-primary.pull-right";
+	public static final String REGISTRATION_EMIAL_ID = "#user_registration_email";
+	public static final String BIRTH_DAY_ID = "#user_registration_profile_birth_date_3i option";
+	public static final String BIRTH_MONTH_ID = "#user_registration_profile_birth_date_2i option";
+	public static final String BIRTH_YEAR_ID = "#user_registration_profile_birth_date_1i option";
+	public static final String REGISTRATION_PASSWORD_ID = "#user_registration_credentials_password";
+	public static final String CONFIRM_REGISTRATION_PASSWORD_ID = "#user_registration_credentials_password_confirmation";
+	public static final String HUMAN_TEST_ID = "#recaptcha_response_field";
+	public static final String BUTTON_CREATE_ACCOUNT_CLASS = ".btn.btn-primary.pull-right";
+	public static final String LOGIN_EMIAL_ID = "#user_authentication_email";
+	public static final String LOGIN_PASSWORD_ID = "#user_authentication_password";
+	public static final String BUTTON_LOGIN_CLASS = ".btn.btn-primary";
+	public static final String BUTTON_LOGOUT_CLASS = ".btn.logout-btn.btn-header-grey.hidden-mobile";
+
 	public static final String INPUT_FIRST_NAME = "Dqdo";
-	public static final String LAST_NAME = "#user_registration_profile_last_name";
 	public static final String INPUT_LAST_NAME = "Pras";
-	public static final String ADDRESS_1 = "#user_registration_address_address_line_1";
 	public static final String INPUT_ADDRESS_1 = "Slavia";
-	public static final String ADDRESS_2 = "#user_registration_address_address_line_2";
 	public static final String INPUT_ADDRESS_2 = "Krasno Selo";
-	public static final String CITY = "#user_registration_address_city";
-	public static final String INPUT_CITY = "Sf";
-	public static final String POST_CODE = "#user_registration_address_postal_code";
+	public static final String INPUT_CITY = "Sofia";
 	public static final String INPUT_POST_CODE = "1000";
-	public static final String PHONE_NUMBER = "#user_registration_address_phone_phone";
 	public static final String INPUT_PHONE_NUMBER = "987654321";
-	public static final String BUTTON_CONTINUE = ".btn.btn-primary.pull-right";
-	public static final String REGISTRATION_EMIAL = "#user_registration_email";
-	public static final String BIRTH_DAY = "#user_registration_profile_birth_date_3i option";
-	public static final String INPUT_BIRTH_DAY = "15";
-	public static final String BIRTH_MONTH = "#user_registration_profile_birth_date_2i option";
-	public static final String INPUT_BIRTH_MONTH = "June";
-	public static final String BIRTH_YEAR = "#user_registration_profile_birth_date_1i option";
-	public static final String INPUT_BIRTH_YEAR = "1990";
-	public static final String REGISTRATION_PASSWORD = "#user_registration_credentials_password";
-	public static final String INPUT_PASSWORD = "sabina.intern.test.selenium1.";
-	public static final String CONFIRM_REGISTRATION_PASSWORD = "#user_registration_credentials_password_confirmation";
-	public static final String HUMAN_TEST = "#recaptcha_response_field";
 	public static final String INPUT_HUMAN_TEST = "*(_)$skrill98712=";
-	public static final String BUTTON_CREATE_ACCOUNT = ".btn.btn-primary.pull-right";
-	public static final String LOGIN_EMIAL = "#user_authentication_email";
-	public static final String LOGIN_PASSWORD = "#user_authentication_password";
-	public static final String BUTTON_LOGIN = ".btn.btn-primary";
-	public static final String BUTTON_LOGOUT = ".btn.logout-btn.btn-header-grey.hidden-mobile";
 
 	static StringBuilder emailBuilder = new StringBuilder();
 	public static Random randomGenerator = new Random();
 	public static final int LENGTH = 4;
 	public static final String POSIBLE_RANDOM_VALUES = "1234567890";
 
-	static String emailBuilder() {
+	public static StringBuilder emailBuilder() {
 		StringBuilder randomString = new StringBuilder();
 		emailBuilder.append("sabina.intern.test.selenium1.");
 		for (int i = 0; i < LENGTH; i++) {
@@ -61,7 +55,13 @@
 		}
 		emailBuilder.append(randomString);
 		emailBuilder.append("@sun-fish.com");
-		return emailBuilder.toString();
+		return emailBuilder;
 	}
 
+	public static String passwordBuilder(StringBuilder email) {
+		int endOfUserName = email.indexOf("@");
+		String password = email.substring(0, endOfUserName);
+		return password;
+
+	}
 }
\ No newline at end of file
diff -r 2544886677c0 SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/LogIn.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/LogIn.java	Mon Jul 29 14:25:13 2013 +0300
@@ -0,0 +1,24 @@
+package com.skrill.interns.SeleniumSabina;
+
+public class LogIn {
+
+	public String email;
+	public String password;
+
+	public boolean login() {
+		RegisterUser.login(email, password);
+		return RegisterUser.logout();
+	}
+
+	public void closingBrowser() {
+		RegisterUser.closingBrowser();
+	}
+
+	public void setEmail(String email) {
+		this.email = email;
+	}
+
+	public void setPassword(String password) {
+		this.password = password;
+	}
+}
diff -r 2544886677c0 SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/RegisterUser.java
--- a/SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/RegisterUser.java	Thu Jul 25 12:12:24 2013 +0300
+++ b/SeleniumSabina/src/main/java/com/skrill/interns/SeleniumSabina/RegisterUser.java	Mon Jul 29 14:25:13 2013 +0300
@@ -8,6 +8,7 @@
 
 import org.openqa.selenium.By;
 import org.openqa.selenium.Keys;
+import org.openqa.selenium.TimeoutException;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.firefox.FirefoxDriver;
@@ -19,153 +20,175 @@
 public class RegisterUser {
 
 	static WebElement webElement;
-	// static WebDriver driver = new FirefoxDriver();
-	static RemoteWebDriver driver;
-	static WebDriverWait timeOut;
+	static WebDriver driver = new FirefoxDriver();
+	// static RemoteWebDriver driver;
+	static WebDriverWait timeOut = new WebDriverWait(driver, 15);
+	static List<WebElement> variable = new ArrayList<WebElement>();
 
-	public static void register(String email) {
+	public static void register(String email, String password) {
 
 		driver.get(IncommingOutgoingConstants.SIGNUP_URL);
 
 		timeOut.until(ExpectedConditions.visibilityOfElementLocated(By
-				.cssSelector(IncommingOutgoingConstants.SELECT_COUNTRY)));
+				.cssSelector(IncommingOutgoingConstants.SELECT_COUNTRY_ID)));
 
-		webElement = setDropDown(IncommingOutgoingConstants.SELECT_COUNTRY);
+		webElement = setDropDownFileds(IncommingOutgoingConstants.SELECT_COUNTRY_ID);
 		webElement.click();
-		// webElement.sendKeys(IncommingOutgoingConstants.COUNTRY + Keys.ENTER);
 
-		webElement = setDropDown(IncommingOutgoingConstants.SELECT_CURRENCY);
+		webElement = setDropDownFileds(IncommingOutgoingConstants.SELECT_CURRENCY_ID);
 		webElement.click();
-		// webElement.sendKeys(IncommingOutgoingConstants.CURRENCY +
-		// Keys.ENTER);
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.FIRST_NAME));
+				.cssSelector(IncommingOutgoingConstants.FIRST_NAME_ID));
 		webElement.sendKeys(IncommingOutgoingConstants.INPUT_FIRST_NAME);
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.LAST_NAME));
+				.cssSelector(IncommingOutgoingConstants.LAST_NAME_ID));
 		webElement.sendKeys(IncommingOutgoingConstants.INPUT_LAST_NAME);
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.ADDRESS_1));
+				.cssSelector(IncommingOutgoingConstants.ADDRESS_1_ID));
 		webElement.sendKeys(IncommingOutgoingConstants.INPUT_ADDRESS_1);
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.ADDRESS_2));
+				.cssSelector(IncommingOutgoingConstants.ADDRESS_2_ID));
 		webElement.sendKeys(IncommingOutgoingConstants.INPUT_ADDRESS_2);
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.CITY));
+				.cssSelector(IncommingOutgoingConstants.CITY_ID));
 		webElement.sendKeys(IncommingOutgoingConstants.INPUT_CITY);
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.POST_CODE));
+				.cssSelector(IncommingOutgoingConstants.POST_CODE_ID));
 		webElement.sendKeys(IncommingOutgoingConstants.INPUT_POST_CODE);
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.PHONE_NUMBER));
+				.cssSelector(IncommingOutgoingConstants.PHONE_NUMBER_ID));
 		webElement.sendKeys(IncommingOutgoingConstants.INPUT_PHONE_NUMBER);
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.BUTTON_CONTINUE));
+				.cssSelector(IncommingOutgoingConstants.BUTTON_CONTINUE_CLASS));
 		webElement.click();
 
 		timeOut.until(ExpectedConditions.visibilityOfElementLocated(By
-				.cssSelector(IncommingOutgoingConstants.REGISTRATION_EMIAL)));
+				.cssSelector(IncommingOutgoingConstants.REGISTRATION_EMIAL_ID)));
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.REGISTRATION_EMIAL));
+				.cssSelector(IncommingOutgoingConstants.REGISTRATION_EMIAL_ID));
 		webElement.sendKeys(email);
 
-		webElement = setDropDown(IncommingOutgoingConstants.BIRTH_DAY);
+		webElement = setDropDownDates(IncommingOutgoingConstants.BIRTH_DAY_ID);
 		webElement.click();
-		// webElement.sendKeys(IncommingOutgoingConstants.INPUT_BIRTH_DAY);
 
-		webElement = setDropDown(IncommingOutgoingConstants.BIRTH_MONTH);
+		webElement = setDropDownDates(IncommingOutgoingConstants.BIRTH_MONTH_ID);
 		webElement.click();
-		// webElement.sendKeys(IncommingOutgoingConstants.INPUT_BIRTH_MONTH);
 
-		webElement = setDropDown(IncommingOutgoingConstants.BIRTH_YEAR);
+		webElement = setDropDownDates(IncommingOutgoingConstants.BIRTH_YEAR_ID);
 		webElement.click();
-		// webElement.sendKeys(IncommingOutgoingConstants.INPUT_BIRTH_YEAR);
-
-		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.REGISTRATION_PASSWORD));
-		webElement.sendKeys(IncommingOutgoingConstants.INPUT_PASSWORD);
 
 		webElement = driver
 				.findElement(By
-						.cssSelector(IncommingOutgoingConstants.CONFIRM_REGISTRATION_PASSWORD));
-		webElement.sendKeys(IncommingOutgoingConstants.INPUT_PASSWORD);
+						.cssSelector(IncommingOutgoingConstants.REGISTRATION_PASSWORD_ID));
+		webElement.sendKeys(password);
+
+		webElement = driver
+				.findElement(By
+						.cssSelector(IncommingOutgoingConstants.CONFIRM_REGISTRATION_PASSWORD_ID));
+		webElement.sendKeys(password);
 
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.HUMAN_TEST));
+				.cssSelector(IncommingOutgoingConstants.HUMAN_TEST_ID));
 		webElement.sendKeys(IncommingOutgoingConstants.INPUT_HUMAN_TEST);
 
-		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.BUTTON_CREATE_ACCOUNT));
-		webElement.click();
-	}
-
-	public static void login(String email) {
-		driver.get(IncommingOutgoingConstants.LOGIN_URL);
-
-		timeOut.until(ExpectedConditions.visibilityOfElementLocated(By
-				.cssSelector(IncommingOutgoingConstants.LOGIN_EMIAL)));
-
-		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.LOGIN_EMIAL));
-		webElement.sendKeys(email);
-
-		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.LOGIN_PASSWORD));
-		webElement.sendKeys(IncommingOutgoingConstants.INPUT_PASSWORD);
-
-		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.BUTTON_LOGIN));
+		webElement = driver
+				.findElement(By
+						.cssSelector(IncommingOutgoingConstants.BUTTON_CREATE_ACCOUNT_CLASS));
 		webElement.click();
 
 	}
 
-	public static void logout() {
+	public static void login(String email, String password) {
+		driver.get(IncommingOutgoingConstants.LOGIN_URL);
+
 		timeOut.until(ExpectedConditions.visibilityOfElementLocated(By
-				.cssSelector(IncommingOutgoingConstants.BUTTON_LOGOUT)));
+				.cssSelector(IncommingOutgoingConstants.LOGIN_EMIAL_ID)));
+
 		webElement = driver.findElement(By
-				.cssSelector(IncommingOutgoingConstants.BUTTON_LOGOUT));
+				.cssSelector(IncommingOutgoingConstants.LOGIN_EMIAL_ID));
+		webElement.sendKeys(email);
+
+		webElement = driver.findElement(By
+				.cssSelector(IncommingOutgoingConstants.LOGIN_PASSWORD_ID));
+		webElement.sendKeys(password);
+
+		timeOut.until(ExpectedConditions.visibilityOfElementLocated(By
+				.cssSelector(IncommingOutgoingConstants.BUTTON_LOGIN_CLASS)));
+
+		webElement = driver.findElement(By
+				.cssSelector(IncommingOutgoingConstants.BUTTON_LOGIN_CLASS));
 		webElement.click();
+
 	}
 
-	public static WebElement setDropDown(String elements) {
+	public static boolean logout() {
+		try {
+			timeOut.until(ExpectedConditions.visibilityOfElementLocated(By
+					.cssSelector(IncommingOutgoingConstants.BUTTON_LOGOUT_CLASS)));
+			webElement = driver
+					.findElement(By
+							.cssSelector(IncommingOutgoingConstants.BUTTON_LOGOUT_CLASS));
+			webElement.click();
+		} catch (org.openqa.selenium.NoSuchElementException e) {
+			return false;
+		} catch (TimeoutException e) {
+			return false;
+		}
+		return true;
+	}
+
+	public static WebElement setDropDownFileds(String elements) {
 		Random choice = new Random();
-		List<WebElement> variable = new ArrayList<WebElement>();
 		variable = driver.findElements(By.cssSelector(elements));
 		int number = choice.nextInt(variable.size());
 		return variable.get(number);
 	}
 
+	public static WebElement setDropDownDates(String elements) {
+		Random choice = new Random();
+		variable = driver.findElements(By.cssSelector(elements));
+		int number = (choice.nextInt(variable.size()) - 1);
+		return variable.get(number + 1);
+
+	}
+
+	public static void closingBrowser() {
+		driver.close();
+	}
+
 	public static void main(String[] args) {
 
-		String email = IncommingOutgoingConstants.emailBuilder();
+		StringBuilder email = IncommingOutgoingConstants.emailBuilder();
+		String password = IncommingOutgoingConstants.passwordBuilder(email);
 
-		try {
-			driver = new RemoteWebDriver(new URL(
-					IncommingOutgoingConstants.REMOTE_URL),
-					DesiredCapabilities.firefox());
-		} catch (MalformedURLException e) {
-			e.printStackTrace();
-		}
+		// try {
+		// driver = new RemoteWebDriver(new URL(
+		// IncommingOutgoingConstants.REMOTE_URL),
+		// DesiredCapabilities.firefox());
+		// } catch (MalformedURLException e) {
+		// e.printStackTrace();
+		// }
 
-		timeOut = new WebDriverWait(driver, 10);
-		register(email);
+		// timeOut = new WebDriverWait(driver, 10);
+		register(email.toString(), password);
+
 		System.out.println("register");
 		logout();
 		System.out.println("log out");
-		login(email);
+		login(email.toString(), password);
 		System.out.println("log in");
 		logout();
 		System.out.println("log out");
-		driver.close();
+		closingBrowser();
 		System.out.println("Browser closed");
 	}
 }
